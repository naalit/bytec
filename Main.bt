extern {
    package bytecoder;

    import static java.lang.System.out;
    import java.util.Random;
}

extern fn println(s: str) = "out.println";

use Lib::Bool;
use Bool::*;

// enum Bool {
//     True,
//     False,
// }
fn not(b: Bool): Bool = match b {
    True => False,
    False => True,
};
fn to_bool(b: Bool): bool = match b {
    True => true,
    False => false,
};

// class Random {
//     fn next_int(max: i32): i32 = "nextInt";
// }
let random = Lib::Random();
fn rand(r: Lib::Random): i32 = r.next_int(10);

fn triple(pub x: i32): i32 {
    fn add(x: i32, y: i32): i32 = x + y;

    let pub y = add(x, x);

    extern {
        out.print("x: " + x);
        out.println(", y: " + y);
    }

    add(x, y)
}

fn triple_2(x: i64): i64 = x * 3;

fn id(x: str): str = "twelve";

fn fib(i: i32): i32 = if i <= 1 {
    1
} else {
    fib(i - 1) + fib(i - 2)
};

fn compare_strings(a: str, b: str): bool = a == b;

fn is_five(i: i32): bool {
    if i == 12 {
        println("it's not five, it's twelve!");
        return false;
    }
    i == 5
}

fn swap(a: i32, b: i32): (i32, i32) = (b, a);
fn sum(x: (i32, i32)): i32 = x.0 + x.1;
fn combine(a: i32, b: i32): i32 = sum(swap(a, b));

fn make_arr(): [(i32, str)] = [(1, "one"), (2, "two"), (3, "three")];
fn take_arr(a: [(i32, str)]): i32 = a[1].0;
fn arrays(): i32 = take_arr(make_arr());

fn test_methods(x: [i32]): i32 {
    let a = x.pop();
    x.push(92);
    let b = x.len();
    a + b
}

fn fib_mut(n: i32): i32 {
    let i = 1;
    let a = 1;
    let b = 1;
    while i < n {
        i += 1;
        let t = a + b;
        a = b;
        b = t;
    }
    a
}
fn map_plus_one(a: [i32]) {
    let i = 0;
    while i < a.len() {
        a[i] += 1;
        i += 1;
    }
}

let counter = 0;
let stuff: [i32] = [];
fn add_stuff(i: i32) {
    stuff.push(i);
    counter += 1;
    stuff[0] -= 1;
}

fn pretty_arr(arr: [i32]) {
    for pub i in arr {
        extern "out.println(i + \", \");";
    }
    for i in 0..200 {
        counter += 1;
    }
    for i in arr {
        if i > 10 && (i & 1) == 1 {
            // This only affects i, not the array, so nothing happens
            i += 1;
        }
    }
}

use Lib::*;
fn stuff() {
    add_arr(3);
    for i in arr {
        println("entry");
    }
}

// extern enum Test {
//     One, Two;
//     let field: str;
//     fn getField(): str;
// }

fn looper(r: Lib::Random) {
    // let t = Test::One;
    // println(t.field + t.getField());
    while rand(r) > 2 {
        println("Looping!");
    }
    // or, equivalently
    loop {
        if rand(r) < 2 {
            break;
        }
        println("Looping!");
    }
}

fn pub main() = println(id("thirteen"));

extern {
    class Helper {
        public static int[] returnsArray() {
            return new int[]{ 1, 2, 3 };
        }
    }
}

extern fn returnsArray(): [i32] = "Helper.returnsArray";

fn callsArray(): i32 {
    let x: str = null;
    if x == null {
        println("Null string " + 3);
    }
    let arr = returnsArray();
    arr.push(12);
    let sum = 0;
    for i in arr {
        sum += i;
    }
    sum
}