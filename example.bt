extern {
    package bytecoder;

    import static java.lang.System.out;
    import java.util.Random;
}

extern fn println(s: str) = "out.println";

class Random;
fn rand(pub r: Random, pub max: i32): i32 {
    // Bytec needs to see rand returning a value of type i32
    // But Java doesn't accept double return, so we need an if(true) so it's not unreachable
    // In the near future, bytec will support extern expressions which fix this
    extern {
        if (true) {
            return r.nextInt(max);
        }
    }
    0
}

fn triple(pub x: i32): i32 {
    fn add(x: i32, y: i32): i32 = x + y;

    let pub y = add(x, x);

    extern {
        out.print("x: " + x);
        out.println(", y: " + y);
    }

    add(x, y)
}

fn triple_2(x: i64): i64 = x * 3;

fn id(x: str): str = "twelve";

fn fib(i: i32): i32 = if i <= 1 {
    1
} else {
    fib(i-1) + fib(i-2)
};

fn compare_strings(a: str, b: str): bool = a == b;

fn is_five(i: i32): bool {
    if i == 12 {
        println("it's not five, it's twelve!");
    }
    i == 5
}

fn pub main() = println(id("thirteen"));
