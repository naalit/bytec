extern {
    package bytecoder;

    import static java.lang.System.out;
    import java.util.Random;
}

extern fn println(s: str) = "out.println";

enum Bool {
    True,
    False,
}
fn not(b: Bool): Bool = match b {
    True => Bool::False,
    False => Bool::True,
};
fn to_bool(b: Bool): bool = match b {
    True => true,
    False => false,
};

class Random {
    fn next_int(max: i32): i32 = "nextInt";
}
fn rand(r: Random): i32 = r.next_int(10);

fn triple(pub x: i32): i32 {
    fn add(x: i32, y: i32): i32 = x + y;

    let pub y = add(x, x);

    extern {
        out.print("x: " + x);
        out.println(", y: " + y);
    }

    add(x, y)
}

fn triple_2(x: i64): i64 = x * 3;

fn id(x: str): str = "twelve";

fn fib(i: i32): i32 = if i <= 1 {
    1
} else {
    fib(i-1) + fib(i-2)
};

fn compare_strings(a: str, b: str): bool = a == b;

fn is_five(i: i32): bool {
    if i == 12 {
        println("it's not five, it's twelve!");
        return false;
    }
    i == 5
}

fn swap(a: i32, b: i32): (i32, i32) = (b, a);
fn sum(x: (i32, i32)): i32 = x.0 + x.1;
fn combine(a: i32, b: i32): i32 = sum(swap(a, b));

fn make_arr(): [(i32, str)] = [(1, "one"), (2, "two"), (3, "three")];
fn take_arr(a: [(i32, str)]): i32 = a[1].0;
fn arrays(): i32 = take_arr(make_arr());

fn test_methods(x: [i32]): i32 {
    let a = x.pop();
    x.push(92);
    let b = x.len();
    a + b
}

fn looper(r: Random) {
    while rand(r) > 2 {
        println("Looping!");
    }
    // or, equivalently
    loop {
        if rand(r) < 2 {
            break;
        }
        println("Looping!");
    }
}

fn pub main() = println(id("thirteen"));
